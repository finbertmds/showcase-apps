# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AppDto {
  appStoreUrl: String
  createdAt: DateTime
  createdBy: String!
  createdByUser: UserDto
  demoUrl: String
  downloadUrl: String
  id: ID!
  languages: [String!]!
  likeCount: Float
  logoUrl: String
  longDesc: String!
  organization: OrganizationDto
  organizationId: String
  platforms: [Platform!]!
  playStoreUrl: String
  releaseDate: DateTime
  repository: String
  shortDesc: String!
  slug: String!
  status: AppStatus!
  tags: [String!]!
  title: String!
  updatedAt: DateTime
  userLiked: Boolean
  userViewed: Boolean
  viewCount: Float
  visibility: AppVisibility!
  website: String
}

"""App status enum"""
enum AppStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

"""App visibility enum"""
enum AppVisibility {
  PRIVATE
  PUBLIC
  UNLISTED
}

type AppsPage {
  items: [AppDto!]!
  limit: Int!
  offset: Int!
  totalCount: Int!
}

type AuthResponse {
  access_token: String!
  user: UserDto!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateAppInput {
  appStoreUrl: String
  demoUrl: String
  downloadUrl: String
  languages: [String!]! = []
  longDesc: String!
  platforms: [Platform!]! = []
  playStoreUrl: String
  releaseDate: DateTime
  repository: String
  shortDesc: String!
  slug: String!
  status: AppStatus
  tags: [String!]! = []
  title: String!
  visibility: AppVisibility! = PUBLIC
  website: String
}

input CreateMediaInput {
  appId: ID!
  filename: String!
  height: Float
  mimeType: String!
  order: Float
  organizationId: String
  originalName: String!
  size: Float!
  type: MediaType!
  url: String!
  userId: String
  width: Float
}

input CreateOrganizationInput {
  description: String
  isActive: Boolean
  logo: String
  name: String!
  slug: String!
  website: String
}

input CreateTimelineEventInput {
  appId: String!
  date: DateTime!
  description: String
  isPublic: Boolean! = true
  metadata: JSON
  title: String!
  type: EventType! = ANNOUNCEMENT
  url: String
  version: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Timeline event type enum"""
enum EventType {
  ANNOUNCEMENT
  BUGFIX
  FEATURE
  MILESTONE
  RELEASE
  UPDATE
}

input GetAppMediaInput {
  appId: ID!
  type: MediaType
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  password: String!
  usernameOrEmail: String!
}

type MediaDto {
  appId: String!
  createdAt: DateTime!
  createdBy: String!
  filename: String!
  height: Float
  id: ID!
  isActive: Boolean!
  meta: JSON
  mimeType: String!
  order: Float!
  organizationId: String
  originalName: String!
  size: Float!
  type: MediaType!
  updatedAt: DateTime!
  uploadedBy: String!
  url: String!
  userId: String
  width: Float
}

"""Media type enum"""
enum MediaType {
  COVER
  DOCUMENT
  ICON
  LOGO
  SCREENSHOT
  VIDEO
}

type Mutation {
  changePassword(input: ChangePasswordInput!): Boolean!
  createApp(input: CreateAppInput!): AppDto!
  createMedia(input: CreateMediaInput!): MediaDto!
  createOrganization(input: CreateOrganizationInput!): OrganizationDto!
  createTimelineEvent(input: CreateTimelineEventInput!): TimelineEventDto!
  deleteMedia(id: String!): Boolean!
  incrementAppLike(id: String!): Boolean!
  incrementAppView(id: String!): Boolean!
  login(input: LoginInput!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  removeApp(id: String!): Boolean!
  removeOrganization(id: String!): Boolean!
  removeTimelineEvent(id: String!): Boolean!
  removeUser(id: String!): Boolean!
  updateApp(id: String!, input: UpdateAppInput!): AppDto!
  updateOrganization(id: String!, input: UpdateOrganizationInput!): OrganizationDto!
  updateTimelineEvent(id: String!, input: UpdateTimelineEventInput!): TimelineEventDto!
  updateUser(id: String!, input: UpdateUserInput!): UserDto!
  uploadAppLogo(file: Upload!, input: UploadAppLogoInput!): MediaDto!
  uploadAppScreenshot(file: Upload!, input: UploadAppScreenshotInput!): MediaDto!
}

type OrganizationDto {
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  logo: String
  name: String!
  owner: OwnerDto
  ownerId: String!
  slug: String!
  updatedAt: DateTime!
  website: String
}

type OwnerDto {
  avatar: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  lastLoginAt: DateTime
  name: String!
  organizationId: String
  role: String!
  updatedAt: DateTime!
  username: String!
}

"""Platform enum"""
enum Platform {
  ANDROID
  API
  DESKTOP
  IOS
  MOBILE
  WEB
}

type Query {
  app(id: String!): AppDto!
  appBySlug(slug: String!): AppDto!
  apps(limit: Int! = 20, offset: Int! = 0, organizationId: String, platforms: [String!], search: String, status: String, tags: [String!], visibility: String): [AppDto!]!
  appsPaginated(category: String, limit: Int!, offset: Int!, search: String): AppsPage!
  getAppMedia(input: GetAppMediaInput!): [MediaDto!]!
  getUserLikedApps: [String!]!
  getUserViewedApps: [String!]!
  hasUserLikedApp(appId: String!): Boolean!
  hasUserViewedApp(appId: String!): Boolean!
  me: UserDto!
  organization(id: String!): OrganizationDto!
  organizationBySlug(slug: String!): OrganizationDto!
  organizations: [OrganizationDto!]!
  timelineApps(limit: Int! = 20, offset: Int! = 0): [AppDto!]!
  timelineEvents(limit: Int! = 20, offset: Int! = 0): [TimelineEventDto!]!
  timelineEventsByApp(appId: String!, isPublic: Boolean! = true): [TimelineEventDto!]!
  user(id: String!): UserDto!
  users: [UserDto!]!
}

input RegisterInput {
  email: String!
  name: String!
  organizationId: String
  password: String!
  role: UserRole
  username: String!
}

type TimelineEventDto {
  appId: String!
  createdAt: DateTime!
  createdBy: String!
  date: DateTime!
  description: String
  id: ID!
  isPublic: Boolean!
  metadata: JSON
  title: String!
  type: EventType!
  updatedAt: DateTime!
  url: String
  version: String
}

input UpdateAppInput {
  appStoreUrl: String
  demoUrl: String
  downloadUrl: String
  languages: [String!]
  longDesc: String
  platforms: [Platform!]
  playStoreUrl: String
  releaseDate: DateTime
  repository: String
  shortDesc: String
  slug: String
  status: AppStatus
  tags: [String!]
  title: String
  visibility: AppVisibility
  website: String
}

input UpdateOrganizationInput {
  description: String
  isActive: Boolean
  logo: String
  name: String
  slug: String
  website: String
}

input UpdateTimelineEventInput {
  date: DateTime
  description: String
  isPublic: Boolean
  metadata: JSON
  title: String
  type: EventType
  url: String
  version: String
}

input UpdateUserInput {
  avatar: String
  email: String
  isActive: Boolean
  name: String
  organizationId: String
  role: UserRole
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadAppLogoInput {
  appId: ID!
}

input UploadAppScreenshotInput {
  appId: ID!
  order: Float
}

type UserDto {
  avatar: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  lastLoginAt: DateTime
  name: String!
  organization: OrganizationDto
  organizationId: String
  role: UserRole!
  updatedAt: DateTime!
  username: String!
}

"""User role enum"""
enum UserRole {
  ADMIN
  DEVELOPER
  VIEWER
}