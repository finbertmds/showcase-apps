'use client';

import { ADD_ENUM_OPTION, REMOVE_ENUM_OPTION, UPDATE_ENUM_OPTION } from '@/lib/graphql/queries';
import { EnumData, EnumOption } from '@/types';
import { useMutation } from '@apollo/client';
import { TrashIcon, XMarkIcon } from '@heroicons/react/24/outline';
import { useEffect, useState } from 'react';
import toast from 'react-hot-toast';

interface EnumOptionDialogProps {
  enumData: EnumData;
  option: EnumOption | null;
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export function EnumOptionDialog({
  enumData,
  option,
  isOpen,
  onClose,
  onSuccess,
}: EnumOptionDialogProps) {
  const [value, setValue] = useState('');
  const [label, setLabel] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const isEdit = !!option;

  const [addOption] = useMutation(ADD_ENUM_OPTION, {
    onCompleted: () => {
      toast.success('Option added successfully!');
      onSuccess();
    },
    onError: (error) => {
      console.error('Error adding option:', error);
      toast.error('Failed to add option');
      setIsSubmitting(false);
    },
  });

  const [updateOption] = useMutation(UPDATE_ENUM_OPTION, {
    onCompleted: () => {
      toast.success('Option updated successfully!');
      onSuccess();
    },
    onError: (error) => {
      console.error('Error updating option:', error);
      toast.error('Failed to update option');
      setIsSubmitting(false);
    },
  });

  const [removeOption] = useMutation(REMOVE_ENUM_OPTION, {
    onCompleted: () => {
      toast.success('Option deleted successfully!');
      onSuccess();
    },
    onError: (error) => {
      console.error('Error deleting option:', error);
      toast.error('Failed to delete option');
      setIsDeleting(false);
    },
  });

  useEffect(() => {
    if (isOpen) {
      if (option) {
        setValue(option.value);
        setLabel(option.label);
      } else {
        setValue('');
        setLabel('');
      }
    }
  }, [isOpen, option]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!value.trim() || !label.trim()) {
      toast.error('Both value and label are required');
      return;
    }

    // Check for duplicate values (excluding current option if editing)
    const existingOption = enumData.options.find(
      opt => opt.value === value.trim() && (!isEdit || opt.value !== option?.value)
    );
    if (existingOption) {
      toast.error('An option with this value already exists');
      return;
    }

    setIsSubmitting(true);

    try {
      if (isEdit) {
        await updateOption({
          variables: {
            key: enumData.key,
            id: option!.id,
            input: {
              id: option!.id,
              value: value.trim(),
              label: label.trim(),
            },
          },
        });
      } else {
        await addOption({
          variables: {
            key: enumData.key,
            input: {
              id: '', // Will be generated by backend
              value: value.trim(),
              label: label.trim(),
            },
          },
        });
      }
    } catch (error) {
      console.error('Error saving option:', error);
    }
  };

  const handleDelete = async () => {
    if (!option) return;

    if (window.confirm(`Are you sure you want to delete the option "${option.value}"?`)) {
      setIsDeleting(true);

      try {
        await removeOption({
          variables: {
            key: enumData.key,
            value: option.value,
          },
        });
      } catch (error) {
        console.error('Error deleting option:', error);
      }
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose} />

        {/* Modal panel */}
        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md sm:w-full">
          <form onSubmit={handleSubmit}>
            {/* Header */}
            <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg leading-6 font-medium text-gray-900">
                  {isEdit ? 'Edit Option' : 'Add New Option'}
                </h3>
                <button
                  type="button"
                  onClick={onClose}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </div>

              <div className="mb-4">
                <p className="text-sm text-gray-600 mb-4">
                  Enum: <span className="font-medium">{enumData.key}</span>
                </p>
              </div>

              {/* Value */}
              <div className="mb-4">
                <label htmlFor="value" className="block text-sm font-medium text-gray-700 mb-2">
                  Value
                </label>
                <input
                  type="text"
                  id="value"
                  value={value}
                  onChange={(e) => setValue(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  placeholder="e.g., DRAFT"
                  required
                />
                <p className="mt-1 text-xs text-gray-500">
                  The internal value used in the code
                </p>
              </div>

              {/* Label */}
              <div className="mb-4">
                <label htmlFor="label" className="block text-sm font-medium text-gray-700 mb-2">
                  Label
                </label>
                <input
                  type="text"
                  id="label"
                  value={label}
                  onChange={(e) => setLabel(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  placeholder="e.g., Draft"
                  required
                />
                <p className="mt-1 text-xs text-gray-500">
                  The display name shown to users
                </p>
              </div>
            </div>

            {/* Footer */}
            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
              <div className="flex space-x-2">
                {isEdit && (
                  <button
                    type="button"
                    onClick={handleDelete}
                    disabled={isDeleting}
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50"
                  >
                    <TrashIcon className="h-4 w-4 mr-1" />
                    {isDeleting ? 'Deleting...' : 'Delete'}
                  </button>
                )}

                <button
                  type="submit"
                  disabled={isSubmitting || !value.trim() || !label.trim()}
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? 'Saving...' : (isEdit ? 'Update Option' : 'Add Option')}
                </button>

                <button
                  type="button"
                  onClick={onClose}
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:w-auto sm:text-sm"
                >
                  Cancel
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
